// <auto-generated />
using System;
using Backend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Cyrillic_General_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Infrastructure.Models.AAP", b =>
                {
                    b.Property<int>("AudiencePackId")
                        .HasColumnType("int")
                        .HasColumnName("AudiencePackId");

                    b.Property<int>("AudienceId")
                        .HasColumnType("int")
                        .HasColumnName("AudienceId");

                    b.Property<int>("AudienceCount")
                        .HasColumnType("int")
                        .HasColumnName("AudienceCount");

                    b.HasKey("AudiencePackId", "AudienceId");

                    b.HasIndex("AudienceId");

                    b.ToTable("AAP", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Audience", b =>
                {
                    b.Property<int>("AudienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AudienceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AudienceId"));

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Age");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit")
                        .HasColumnName("Sex");

                    b.HasKey("AudienceId");

                    b.ToTable("Audience", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.AudiencePack", b =>
                {
                    b.Property<int>("AudiencePackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AudiencePackId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AudiencePackId"));

                    b.Property<string>("AudiencePackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AudiencePackName");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("Price");

                    b.HasKey("AudiencePackId");

                    b.ToTable("AudiencePack", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.AudienceSession", b =>
                {
                    b.Property<int>("AudiencePackId")
                        .HasColumnType("int")
                        .HasColumnName("AudiencePackId");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SessionId");

                    b.Property<int>("AudiencePackCount")
                        .HasColumnType("int")
                        .HasColumnName("AudiencePackCount");

                    b.HasKey("AudiencePackId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("AudienceSession", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.EmotionalExpect", b =>
                {
                    b.Property<int>("EmotionalExpectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmotionalExpectId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmotionalExpectId"));

                    b.Property<int>("AudienceId")
                        .HasColumnType("int")
                        .HasColumnName("AudienceId");

                    b.Property<string>("Emotional")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Emotional");

                    b.Property<int>("End")
                        .HasColumnType("int")
                        .HasColumnName("End");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SessionId");

                    b.Property<int>("Start")
                        .HasColumnType("int")
                        .HasColumnName("Start");

                    b.HasKey("EmotionalExpectId");

                    b.HasIndex("AudienceId");

                    b.HasIndex("SessionId");

                    b.ToTable("EmotionalExpect", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.EmotionalResult", b =>
                {
                    b.Property<int>("EmotionalResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmotionalResultId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmotionalResultId"));

                    b.Property<int>("AudienceId")
                        .HasColumnType("int")
                        .HasColumnName("AudienceId");

                    b.Property<string>("Emotional")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Emotional");

                    b.Property<int>("End")
                        .HasColumnType("int")
                        .HasColumnName("End");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonId");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SessionId");

                    b.Property<int>("Start")
                        .HasColumnType("int")
                        .HasColumnName("Start");

                    b.HasKey("EmotionalResultId");

                    b.HasIndex("AudienceId");

                    b.HasIndex("SessionId");

                    b.ToTable("EmotionalResult", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Role");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.HasKey("ProfileId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("ReportPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReportPath");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SessionId");

                    b.HasKey("ReportId");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SessionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<string>("Datetime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Datetime");

                    b.Property<int>("DurationMinute")
                        .HasColumnType("int")
                        .HasColumnName("DurationMinute");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Location");

                    b.Property<int?>("ProfileId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("ProfileId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.HasKey("SessionId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.AAP", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.Audience", "Audience")
                        .WithMany("AAPs")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.AudiencePack", "AudiencePack")
                        .WithMany("AAPs")
                        .HasForeignKey("AudiencePackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("AudiencePack");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.AudienceSession", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.AudiencePack", "AudiencePack")
                        .WithMany("AudienceSession")
                        .HasForeignKey("AudiencePackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.Session", "Session")
                        .WithMany("AudienceSession")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudiencePack");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.EmotionalExpect", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.Audience", "Audience")
                        .WithMany()
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.Session", "Session")
                        .WithMany("EmotionalExpect")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.EmotionalResult", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.Audience", "Audience")
                        .WithMany()
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.Session", "Session")
                        .WithMany("EmotionalResult")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Report", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.Session", "Session")
                        .WithOne("Report")
                        .HasForeignKey("Backend.Infrastructure.Models.Report", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Session", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.Profile", "Profile")
                        .WithMany("Sessions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Audience", b =>
                {
                    b.Navigation("AAPs");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.AudiencePack", b =>
                {
                    b.Navigation("AAPs");

                    b.Navigation("AudienceSession");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Profile", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Session", b =>
                {
                    b.Navigation("AudienceSession");

                    b.Navigation("EmotionalExpect");

                    b.Navigation("EmotionalResult");

                    b.Navigation("Report")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
